<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="item">

<!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: INCLUDE ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->

<!-- ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  QUERY  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->

	<!-- 항목/보기 조회 selectItem -->
	<select id="selectItem" parameterType="string" resultType="map">
		/* 항목/보기 조회 selectItem */
		select 
			parent_code
			,cate_code
			,item_name
			,item_depth
			,isnull(item_etc, '') as item_etc
			,order_no
			,use_yn
		from tbl_eval_item WITH(NOLOCK)
		where item_code = #{item_code}
	</select>
	
	<!-- 항목/보기 목록  selectList -->
	<select id="selectList" parameterType="map" resultType="map">
		/* 항목/보기 목록  selectList  */
		select 
			item_code
			,parent_code
			,cate_code
			,item_name
			,item_depth
			,isnull(item_etc, '') as item_etc
			,order_no
			,use_yn
			,(case item_depth when 1 then '상위항목 없음' 
				else (select item_name from tbl_eval_item WITH(NOLOCK) 
						where item_code = A.parent_code) end) as parent_name
		from tbl_eval_item A WITH(NOLOCK)
		where 1=1
		<if test='parent_code!=null and parent_code!=""'>
			and parent_code = #{parent_code}
		</if>
		<if test='cate_code!=null and cate_code!=""'>
			and cate_code = #{cate_code}
		</if>
		<if test='item_depth!=null and item_depth!=""'>
			and item_depth = #{item_depth}
		</if>
		<if test='use_yn!=null and use_yn!=""'>
			and use_yn = #{use_yn}
		</if>
		order by convert(int, item_code) asc
	</select>

<!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: INSERT :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->	
	
	<!-- 항목/보기 등록 insertItem -->
	<insert id="insertItem" parameterType="map">
		/* 항목/보기 등록 insertItem */
		insert into tbl_eval_item (
			item_code,parent_code,cate_code,item_name,item_depth,item_etc,order_no,use_yn
		)
		select 
			item_code
			,(case '${parent_code}' when '_parent' then item_code else '${parent_code}' end)
			,#{cate_code}
			,#{item_name}
			,(case '${parent_code}' when '_parent' then 1 else 2 end)
			,#{item_etc}
			,item_code
			,#{use_yn}
		from 
		(
			select
				case '${parent_code}' when '_parent' then (
					select (case when isnull(max(item_code), 0)=0 then '1000' else max(convert(int, item_code))+100 end)
					from tbl_eval_item WITH(NOLOCK)
					where item_depth = 1
				) else (
					select isnull(max(convert(int, item_code)),'${parent_code}')+1
					from tbl_eval_item WITH(NOLOCK)
					where parent_code = #{parent_code} 
					and item_depth = 2
				) end as item_code
		) U
	</insert>
	
<!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: UPDATE :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->
	
	<!-- 항목/보기 업데이트 updateItem -->
	<update id="updateItem" parameterType="map">
		/* 항목/보기 업데이트 updateItem */	
		update tbl_eval_item
		<set>
			<if test='item_name!=null and item_name!=""'>item_name = #{item_name},</if>
			<if test='item_etc!=null'>item_etc = #{item_etc},</if>
			<if test='order_no!=null and order_no!=""'>order_no = #{order_no},</if>
			<if test='use_yn!=null and use_yn!=""'>use_yn = #{use_yn},</if>
		</set>
		where item_code = #{item_code}
	</update>

<!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: DELETE :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->
	
	<!-- 항목/보기 삭제 (하위 항목/보기가 없는 경우만 삭제됨) deleteItem -->
	<delete id="deleteItem" parameterType="map">
		/* 항목 보기 삭제 deleteItem */
		delete from tbl_eval_item
		where item_code = #{item_code} 
		and (
			select top 1 item_code 
			from tbl_eval_item A WITH(NOLOCK)
			where A.parent_code = tbl_eval_item.item_code 
			and A.item_depth = tbl_eval_item.item_depth + 1
		) is null
	</delete>

</mapper>